const express = require("express");
const cors = require("cors");
const mysql = require("mysql2");
const moment = require("moment");
const requestIp = require("request-ip");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const SECRET_KEY = "4a12695e4f77c7fcf5a2916f25284106cd928bf1a7387abc917d6f5100133c1b";
require("dotenv").config();

const app = express();
app.use(express.json());
app.use(cors({ origin: "*" }));
app.use(requestIp.mw());



// K·∫øt n·ªëi CSDL v·ªõi Pool ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
const connection = mysql.createPool({
  host: "localhost",
  user: "root",
  password: "123456",
  database: "quanly_hocsinh",
  timezone: "+07:00",
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
}).promise();

console.log("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!");

// Middleware x√°c th·ª±c
function authMiddleware(roles = []) {
  return (req, res, next) => {
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) return res.status(401).json({ error: "Kh√¥ng c√≥ token!" });

    try {
      const decoded = jwt.verify(token, SECRET_KEY);
      if (roles.length && !roles.includes(decoded.role)) {
        return res.status(403).json({ error: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" });
      }
      req.user = decoded;
      next();
    } catch (err) {
      return res.status(401).json({ error: "Token kh√¥ng h·ª£p l·ªá!" });
    }
  };
}

// üìå ƒêƒÉng nh·∫≠p gi√°o vi√™n
app.post("/api/dang-nhap", async (req, res) => {
  const { username, password } = req.body;
  if (!username || !password) return res.status(400).json({ error: "Thi·∫øu t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!" });

  try {
    const [results] = await connection.query("SELECT * FROM giaovien WHERE username = ?", [username]);
    if (results.length === 0) return res.status(401).json({ error: "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!" });

    const user = results[0];
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(401).json({ error: "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!" });

    const token = jwt.sign({ id: user.id, username: user.username, role: user.role }, SECRET_KEY, { expiresIn: "24h" });
    res.json({ token, role: user.role });
  } catch (err) {
    res.status(500).json({ error: "L·ªói truy v·∫•n database!" });
  }
});
// üìå ƒêƒÉng k√Ω h·ªçc sinh
app.post("/api/dang-ky", async (req, res) => {
  const { name, email, password, class: lop, grade } = req.body;
  if (!name || !email || !password || !lop || !grade) {
    return res.status(400).json({ error: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin." });
  }

  try {
    const cleanEmail = email.toLowerCase().trim();

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const [results] = await connection.query("SELECT id FROM hocsinh WHERE email = ?", [cleanEmail]);
    if (results.length > 0) return res.status(400).json({ error: "Email ƒë√£ t·ªìn t·∫°i!" });

    // BƒÉm m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password, 10);
    console.log("üîπ Hashed Password:", hashedPassword);

    // L∆∞u v√†o database
    const sql = "INSERT INTO hocsinh (hoten, email, password, lop, khoi) VALUES (?, ?, ?, ?, ?)";
    const [insertResult] = await connection.query(sql, [name, cleanEmail, hashedPassword, lop, grade]);

    res.json({ success: true, studentId: insertResult.insertId });
  } catch (err) {
    console.error("üî• L·ªói ƒëƒÉng k√Ω:", err);
    res.status(500).json({ error: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i!" });
  }
});


// üìå ƒêƒÉng nh·∫≠p h·ªçc sinh
app.post("/api/dang-nhap", (req, res) => {
  const { email, password } = req.body;
  if (!email || !password) {
    return res.status(400).json({ error: "Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u!" });
  }

  const cleanEmail = email.toLowerCase().trim();
  console.log("üîç Email nh·∫≠p v√†o:", cleanEmail);

  connection.query("SELECT * FROM hocsinh WHERE email = ?", [cleanEmail], async (err, results) => {
    if (err) {
      console.error("‚ùå L·ªói k·∫øt n·ªëi CSDL:", err);
      return res.status(500).json({ error: "L·ªói k·∫øt n·ªëi CSDL!" });
    }

    if (results.length === 0) {
      console.log("‚ùå Email kh√¥ng t·ªìn t·∫°i trong DB!");
      return res.status(401).json({ error: "Sai email ho·∫∑c m·∫≠t kh·∫©u!" });
    }

    const user = results[0];
    console.log("üîπ M·∫≠t kh·∫©u nh·∫≠p:", password);
    console.log("üîπ M·∫≠t kh·∫©u trong DB:", user.password);

    const isMatch = await bcrypt.compare(password, user.password);
    console.log("üîπ K·∫øt qu·∫£ so s√°nh m·∫≠t kh·∫©u:", isMatch);

    if (!isMatch) {
      console.log("‚ùå M·∫≠t kh·∫©u kh√¥ng kh·ªõp!");
      return res.status(401).json({ error: "Sai email ho·∫∑c m·∫≠t kh·∫©u!" });
    }

    // ‚úÖ T·∫°o token & tr·∫£ v·ªÅ
    const token = jwt.sign({ id: user.id, email: user.email, role: "hocsinh" }, SECRET_KEY, { expiresIn: "24h" });

    console.log("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
    res.json({ token, role: "hocsinh" });

  });
});

// üìå API ƒëi·ªÉm danh (ch·ªâ qu√©t m√£ QR c·ªë ƒë·ªãnh)
app.post("/api/diem-danh", authMiddleware(["hocsinh"]), async (req, res) => {
  console.log("Token nh·∫≠n ƒë∆∞·ª£c:", req.headers.authorization);
  const { qr_code } = req.body;
  const id_hocsinh = req.user.id;
 

  // Ki·ªÉm tra m√£ QR h·ª£p l·ªá
  if (qr_code !== "diemdanh_toantruong") {
    return res.status(400).json({ error: "‚ùå M√£ QR kh√¥ng h·ª£p l·ªá!" });
  }

  const ngay = moment().format("YYYY-MM-DD");
  const gioHT = moment().hour() * 60 + moment().minute(); // L·∫•y s·ªë ph√∫t t·ª´ 00:00
  const ip = req.clientIp;

  try {
    // L·∫•y th√¥ng tin h·ªçc sinh
    const [studentResults] = await connection.query("SELECT khoi FROM hocsinh WHERE id = ?", [id_hocsinh]);
    if (studentResults.length === 0) return res.status(404).json({ error: "‚ùå Kh√¥ng t√¨m th·∫•y h·ªçc sinh!" });

    const khoi = studentResults[0].khoi;
    let trangthai = "ƒê√∫ng gi·ªù"; // M·∫∑c ƒë·ªãnh l√† ƒë√∫ng gi·ªù

    // X√°c ƒë·ªãnh khung gi·ªù ƒëi·ªÉm danh theo kh·ªëi
    let gioBatDau, gioKetThuc;
    if (khoi === "10") {
      gioBatDau = 660; // 11:00
      gioKetThuc = 750; // 12:30
    } else if (khoi === "11" || khoi === "12") {
      gioBatDau = 300; // 5:00
      gioKetThuc = 405; // 6:45
    } else {
      return res.status(400).json({ error: "‚ùå Kh·ªëi kh√¥ng h·ª£p l·ªá!" });
    }

    // Ki·ªÉm tra khung gi·ªù ƒëi·ªÉm danh
    if (gioHT < gioBatDau) {
      return res.status(400).json({ error: "‚ùå Ch∆∞a ƒë·∫øn gi·ªù ƒëi·ªÉm danh!" });
    }
    if (gioHT > gioKetThuc) {
      trangthai = "ƒêi tr·ªÖ"; // Sau gi·ªù k·∫øt th√∫c l√† tr·ªÖ
    }

    // Ki·ªÉm tra h·ªçc sinh ƒë√£ ƒëi·ªÉm danh ch∆∞a
    const [attendanceResults] = await connection.query("SELECT * FROM diemdanh WHERE id_hocsinh = ? AND ngay = ?", [id_hocsinh, ngay]);
    if (attendanceResults.length > 0) {
      return res.status(400).json({ error: "‚ùå H√¥m nay ƒë√£ ƒëi·ªÉm danh r·ªìi!" });
    }

    // Ghi nh·∫≠n ƒëi·ªÉm danh
    await connection.query("INSERT INTO diemdanh (id_hocsinh, ngay, trangthai, ip) VALUES (?, ?, ?, ?)", [id_hocsinh, ngay, trangthai, ip]);

    res.json({ message: "‚úÖ ƒêi·ªÉm danh th√†nh c√¥ng!", trangthai });
  } catch (err) {
    res.status(500).json({ error: "‚ö† L·ªói truy v·∫•n database!" });
  }
});


// üìå API l·∫•y danh s√°ch ƒëi·ªÉm danh
app.get("/api/danhsach-diemdanh", async (req, res) => {
  try {
    const [results] = await connection.query(`
      SELECT hocsinh.hoten, diemdanh.ngay, diemdanh.trangthai 
      FROM diemdanh 
      JOIN hocsinh ON diemdanh.id_hocsinh = hocsinh.id
      ORDER BY diemdanh.ngay DESC
    `);
    res.json(results);
  } catch (err) {
    res.status(500).json({ error: "L·ªói truy v·∫•n CSDL!" });
  }
});

// üìå API l·∫•y danh s√°ch h·ªçc sinh
app.get("/api/danh-sach-hoc-sinh", authMiddleware(["admin", "giaovien"]), async (req, res) => {
  try {
    const [results] = await connection.query("SELECT id, hoten, lop, khoi FROM hocsinh");
    res.json(results);
  } catch (err) {
    res.status(500).json({ error: "L·ªói truy v·∫•n database!" });
  }
});

// üìå API l·∫•y l·ªãch s·ª≠ ƒëi·ªÉm danh (gi√°o vi√™n v√† admin ƒë·ªÅu xem ƒë∆∞·ª£c)
app.get("/api/lich-su-diem-danh", authMiddleware(["admin", "giaovien"]), async (req, res) => {
  try {
    const [results] = await connection.query("SELECT * FROM diemdanh");
    res.json(results);
  } catch (err) {
    res.status(500).json({ error: "L·ªói truy v·∫•n database!" });
  }
});
app.get("/", (req, res) => {
  res.send("Server is running!");
});
const PORT = process.env.PORT || 5002;
app.listen(PORT, () => {
  console.log(`‚úÖ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
});     